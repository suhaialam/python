# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16dEcCgeFQ6NdMYw1OOcZwGRcpWw_v9AJ
"""

import pandas as pd

# Dictionary of lists
data = {'name': ["Smith", "William", "Phill", "Parker"],
        'age': ["28", "39", "39", "34"]}

# Create DataFrame
info = pd.DataFrame(data)

# Setting custom index
info.index = [True, True, False, True]

# Print DataFrame
print(info)

import pandas as pd

# Dictionary of lists
data = {'name': ["Smith", "William", "Phill", "Parker"],
        'age': ["28", "39", "34", "36"]}

# Create DataFrame
info = pd.DataFrame(data, index=[True, True, False, True])

# Accessing a DataFrame using .loc[] function
print(info.loc[True])

import numpy as np

# Original array
arr = np.arange(16)
print("The Original array is:\n", arr)

# Reshaping the array into 2 rows and 8 columns
arr = np.arange(16).reshape(2, 8)
print("\nReshaped array:\n", arr)

# Reshaping the array into 8 rows and 2 columns
arr = np.arange(16).reshape(8, 2)
print("\nReshaped array:\n", arr)

import numpy as np

# Create a rank 1 array
a = np.array([1, 2, 3])

# Print the type of the array
print(type(a))  # Should print "<class 'numpy.ndarray'>"

# Print the shape of the array
print(a.shape)  # Should print "(3,)"

# Print individual elements of the array
print(a[0], a[1], a[2])  # Should print "1 2 3"

# Change an element of the array
a[0] = 5
print(a)  # Should print "[5, 2, 3]"

# Create a rank 2 array
b = np.array([[1, 2, 3], [4, 5, 6]])

# Print the shape of the array
print(b.shape)  # Should print "(2, 3)"

# Print individual elements of the array
print(b[0, 0], b[0, 1], b[1, 0])  # Should print "1 2 4"

# Numpy also provides many functions to create arrays:

# Create an array of all zeros
a = np.zeros((2, 2))
print(a)

# Create an array of all ones
b = np.ones((1, 2))
print(b)

# Create a constant array
c = np.full((2, 2), 7)
print(c)

# Create a 2x2 identity matrix
d = np.eye(2)
print(d)

# Create an array filled with random values
e = np.random.random((2, 2))
print(e)

import numpy as np

# Create the following rank 2 array with shape (3, 4)
a = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])

# Use slicing to pull out the subarray consisting of the first 2 rows
# and columns 1 and 2; b is the following array of shape (2, 2):
# [[2 3]
#  [6 7]]
b = a[:2, 1:3]

# A slice of an array is a view into the same data, so modifying it
# will modify the original array.

print(a[0, 1])  # Prints "2"

b[0, 0] = 77  # b[0, 0] is the same piece of data as a[0, 1]

print(a[0, 1])  # Prints "77"

import numpy as np

# Create the following rank 2 array with shape (3, 4)
a = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])

# Two ways of accessing the data in the middle row of the array.
# Mixing integer indexing with slices yields an array of lower rank,
# while using only slices yields an array of the same rank as the
# original array:

# Rank 1 view of the second row of a
row_r1 = a[1, :]
# Rank 2 view of the second row of a
row_r2 = a[1:2, :]

print(row_r1, row_r1.shape)  # Prints "[5 6 7 8] (4,)"
print(row_r2, row_r2.shape)  # Prints "[[5 6 7 8]] (1, 4)"

# We can make the same distinction when accessing columns of an array:
# Rank 1 view of the second column of a
col_r1 = a[:, 1]
# Rank 2 view of the second column of a
col_r2 = a[:, 1:2]

print(col_r1, col_r1.shape)  # Prints "[ 2  6 10] (3,)"
print(col_r2, col_r2.shape)  # Prints "[[ 2]
                              #          [ 6]
                              #          [10]] (3, 1)"

import numpy as np

# Create a 2D array
a = np.array([[1, 2], [3, 4], [5, 6]])

# Example of integer array indexing
print(a[[0, 1, 2], [0, 1, 0]])  # Prints "[1 4 5]"

# Equivalent to the above using basic indexing
print(np.array([a[0, 0], a[1, 1], a[2, 0]]))  # Prints "[1 4 5]"

# Reusing the same element from the source array
print(a[[0, 0], [1, 1]])  # Prints "[2 2]"

# Equivalent to the previous example using basic indexing
print(np.array([a[0, 1], a[0, 1]]))  # Prints "[2 2]"

# Selecting or mutating one element from each row of a matrix
a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])
print(a)

# Create an array of indices
b = np.array([0, 2, 0, 1])

# Select one element from each row of a using the indices in b
print(a[np.arange(4), b])  # Prints "[ 1 6 7 11]"

# Mutate one element from each row of a using the indices in b
a[np.arange(4), b] += 10
print(a)  # Prints the mutated array

import numpy as np

a = np.array([[1, 2], [3, 4], [5, 6]])

# Creating a boolean array based on the condition (a > 2)
bool_idx = (a > 2)

# Print the boolean array
print(bool_idx)

# Prints "[[False False]
#          [ True  True]
#          [ True  True]]"

# Use boolean array indexing to construct a rank 1 array
# consisting of the elements of 'a' corresponding to the True values
# of bool_idx
print(a[bool_idx])

# Prints "[3 4 5 6]"

# We can also do all of the above in a single concise statement:
print(a[a > 2])

# Prints "[3 4 5 6]"

import numpy as np

x = np.array([1, 2])
# Let numpy choose the datatype
print(x.dtype)  # Prints "int64"

x = np.array([1.0, 2.0])
# Let numpy choose the datatype
print(x.dtype)  # Prints "float64"

x = np.array([1, 2], dtype=np.int64)  # Specify a particular datatype
# Force a particular datatype
print(x.dtype)  # Prints "int64"

import numpy as np

x = np.array([[1, 2], [3, 4]], dtype=np.float64)
y = np.array([[5, 6], [7, 8]], dtype=np.float64)

# Elementwise sum
print(x + y)
print(np.add(x, y))

# Elementwise difference
print(x - y)
print(np.subtract(x, y))

# Elementwise product
print(x * y)
print(np.multiply(x, y))

# Elementwise division
print(x / y)
print(np.divide(x, y))

# Elementwise square root
print(np.sqrt(x))

import numpy as np

x = np.array([[1, 2], [3, 4]])
y = np.array([[5, 6], [7, 8]])
v = np.array([9, 10])
w = np.array([11, 12])

# Inner product of vectors
print(v.dot(w))
print(np.dot(v, w))  # Both print "219"

# Matrix / vector product
print(x.dot(v))
print(np.dot(x, v))  # Both print "[29 67]"

# Matrix / matrix product
print(x.dot(y))
print(np.dot(x, y))  # Both print "[[19 22] [43 50]]"

# Summation operations
print(np.sum(x))  # Compute sum of all elements; prints "10"
print(np.sum(x, axis=0))  # Compute sum of each column; prints "[4 6]"
print(np.sum(x, axis=1))  # Compute sum of each row; prints "[3 7]"

import numpy as np

x = np.array([[1, 2], [3, 4]])

print(x)
# Prints "[[1 2]
#          [3 4]]"

print(x.T)
# Prints "[[1 3]
#          [2 4]]"

# Note that taking the transpose of a rank 1 array does nothing:
v = np.array([1, 2, 3])
print(v)  # Prints "[1 2 3]"
print(v.T)  # Prints "[1 2 3]"